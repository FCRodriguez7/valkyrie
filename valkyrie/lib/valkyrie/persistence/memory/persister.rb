# frozen_string_literal: true
module Valkyrie::Persistence::Memory
  class Persister
    attr_reader :adapter
    delegate :cache, to: :adapter
    # @param adapter [Valkyrie::Persistence::Memory::Adapter] The memory adapter which
    #   holds the cache for this persister.
    def initialize(adapter)
      @adapter = adapter
    end

    # @param model [Valkyrie::Model] The model to save.
    # @return [Valkyrie::Model] The model with an `#id` value generated by the
    #   persistence backend.
    def save(model:)
      generate_id(model) if model.id.blank?
      inner_model(model).updated_at = Time.current
      cache[model.id] = inner_model(model)
    end

    # @param models [Array<Valkyrie::Model>] List of models to save.
    # @return [Array<Valkyrie::Model>] List of models with an `#id` value
    #   generated by the persistence backend.
    def save_all(models:)
      models.map do |model|
        save(model: model)
      end
    end

    # @param model [Valkyrie::Model] The model to delete from the persistence
    #   backend.
    def delete(model:)
      cache.delete(model.id)
    end

    private

      def inner_model(model)
        if model.respond_to?(:model)
          model.model
        else
          model
        end
      end

      def generate_id(model)
        inner_model(model).id = SecureRandom.uuid
        inner_model(model).created_at = Time.current
      end
  end
end
